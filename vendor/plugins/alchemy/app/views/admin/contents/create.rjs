case @content.essence_type
when "EssencePicture"
  page.insert_html(
    :before,
    "add_content_#{@element.id}",
    :partial => "essences/essence_picture_editor",
    :locals => {
      :content => @content,
      :options => @options
    }
  )
  page << "Alchemy.SortableContents('#element_#{@element.id}_contents', '#{form_authenticity_token}')"
  page << "jQuery('#element_#{@element.id}_contents .essence_picture_editor').addClass('dragable_picture')" if @contents_of_this_type.length > 1
  if !@options[:maximum_amount_of_images].blank? && (@contents_of_this_type.length >= @options[:maximum_amount_of_images].to_i)
    page.remove "add_content_#{@element.id}"
  end
  page << "Alchemy.reloadPreview()"
  page << "Alchemy.closeCurrentWindow()"
when "EssenceText"
  locals = {
    :content => @content,
    :options => {:as => 'text_field'}.merge(@options.nil? ? {} : @options)
  }
  if params[:was_missing]
    page.replace(
      "element_#{@element.id}_content_missing",
      :partial => "essences/essence_text_editor",
      :locals => locals
    )
  else
    page.insert_html(
      :before,
      "add_content_for_element_#{@element.id}",
      :partial => "essences/essence_text_editor",
      :locals => locals
    )
    page << "Alchemy.reloadPreview()"
    page << "Alchemy.closeCurrentWindow()"
  end
when "EssenceRichtext"
  locals = {
    :content => @content,
    :options => (@options.nil? ? {} : @options)
  }
  if params[:was_missing]
    page.replace(
      "element_#{@element.id}_content_missing",
      :partial => "essences/essence_richtext_editor",
      :locals => locals
    )
  else
    page.insert_html(
      :before,
      "add_content_for_element_#{@element.id}",
      :partial => "essences/essence_richtext_editor",
      :locals => locals
    )
    page << "Alchemy.closeCurrentWindow()"
  end
  page << "TinymceHammer.addEditor('contents_content_#{@content.id}_body')"
else
  page.insert_html(
    :before,
    "add_content_for_element_#{@element.id}",
    :partial => "essences/#{@content.essence_type.underscore}_editor",
    :locals => {
      :content => @content,
      :options => (@options.nil? ? {} : @options)
    }
  )
  page << "Alchemy.closeCurrentWindow()"
end
Alchemy::Notice.show(page, _("Successfully added %{content}") % {:content => @content.name})